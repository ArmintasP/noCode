/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * NoCode.FlowerShop.Api
 * OpenAPI spec version: 1.0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useMutation } from 'react-query';
import type { UseMutationOptions, MutationFunction } from 'react-query';
export interface CustomerRegisterRequest {
  email?: string | null;
  password?: string | null;
}

export interface CustomerLoginRequest {
  email?: string | null;
  password?: string | null;
}

export interface AdministratorLoginRequest {
  email?: string | null;
  password?: string | null;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const postAdministratorsLogin = (
  administratorLoginRequest: AdministratorLoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/administrators/login`,
    administratorLoginRequest,
    options
  );
};

export const getPostAdministratorsLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAdministratorsLogin>>,
    TError,
    { data: AdministratorLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAdministratorsLogin>>,
  TError,
  { data: AdministratorLoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAdministratorsLogin>>,
    { data: AdministratorLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAdministratorsLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAdministratorsLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAdministratorsLogin>>
>;
export type PostAdministratorsLoginMutationBody = AdministratorLoginRequest;
export type PostAdministratorsLoginMutationError = AxiosError<unknown>;

export const usePostAdministratorsLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAdministratorsLogin>>,
    TError,
    { data: AdministratorLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostAdministratorsLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomersRegister = (
  customerRegisterRequest: CustomerRegisterRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/customers/register`,
    customerRegisterRequest,
    options
  );
};

export const getPostCustomersRegisterMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomersRegister>>,
    TError,
    { data: CustomerRegisterRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomersRegister>>,
  TError,
  { data: CustomerRegisterRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomersRegister>>,
    { data: CustomerRegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCustomersRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomersRegister>>
>;
export type PostCustomersRegisterMutationBody = CustomerRegisterRequest;
export type PostCustomersRegisterMutationError = AxiosError<unknown>;

export const usePostCustomersRegister = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomersRegister>>,
    TError,
    { data: CustomerRegisterRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostCustomersRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomersLogin = (
  customerLoginRequest: CustomerLoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(`/customers/login`, customerLoginRequest, options);
};

export const getPostCustomersLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomersLogin>>,
    TError,
    { data: CustomerLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomersLogin>>,
  TError,
  { data: CustomerLoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomersLogin>>,
    { data: CustomerLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCustomersLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomersLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomersLogin>>
>;
export type PostCustomersLoginMutationBody = CustomerLoginRequest;
export type PostCustomersLoginMutationError = AxiosError<unknown>;

export const usePostCustomersLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomersLogin>>,
    TError,
    { data: CustomerLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostCustomersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
