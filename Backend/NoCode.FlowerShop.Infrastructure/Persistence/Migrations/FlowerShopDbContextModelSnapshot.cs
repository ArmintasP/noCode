// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoCode.FlowerShop.Infrastructure.Persistence;

#nullable disable

namespace NoCode.FlowerShop.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(FlowerShopDbContext))]
    partial class FlowerShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.DeliveryLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryLocations", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Flower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Flowers", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.FlowerArrangement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("FlowerArrangementCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StorageQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowerArrangementCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FlowersArrangements", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.FlowerArrangementCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FlowersArrangementCategories", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliveryLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeliveryOption")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryLocationId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Cart", b =>
                {
                    b.HasOne("NoCode.FlowerShop.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("NoCode.FlowerShop.Domain.Common.FlowerArrangementPair", "FlowerArrangements", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("FlowerArrangementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("CartId", "FlowerArrangementId");

                            b1.HasIndex("FlowerArrangementId");

                            b1.ToTable("CartFlowerArrangements", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CartId");

                            b1.HasOne("NoCode.FlowerShop.Domain.FlowerArrangement", "FlowerArrangement")
                                .WithMany()
                                .HasForeignKey("FlowerArrangementId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("FlowerArrangement");
                        });

                    b.Navigation("Customer");

                    b.Navigation("FlowerArrangements");
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.FlowerArrangement", b =>
                {
                    b.HasOne("NoCode.FlowerShop.Domain.FlowerArrangementCategory", "FlowerArrangementCategory")
                        .WithMany()
                        .HasForeignKey("FlowerArrangementCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("NoCode.FlowerShop.Domain.Flowers", "Flowers", b1 =>
                        {
                            b1.Property<Guid>("FlowerArrangementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("FlowerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("FlowerArrangementId", "FlowerId");

                            b1.HasIndex("FlowerId");

                            b1.ToTable("FlowersArrangementsFlowers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("FlowerArrangementId");

                            b1.HasOne("NoCode.FlowerShop.Domain.Flower", "Flower")
                                .WithMany()
                                .HasForeignKey("FlowerId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Flower");
                        });

                    b.Navigation("FlowerArrangementCategory");

                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("NoCode.FlowerShop.Domain.Order", b =>
                {
                    b.HasOne("NoCode.FlowerShop.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoCode.FlowerShop.Domain.DeliveryLocation", "DeliveryLocation")
                        .WithMany()
                        .HasForeignKey("DeliveryLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("NoCode.FlowerShop.Domain.Common.FlowerArrangementPair", "FlowerArrangements", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("FlowerArrangementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("OrderId", "FlowerArrangementId");

                            b1.HasIndex("FlowerArrangementId");

                            b1.ToTable("OrderFlowerArrangements", (string)null);

                            b1.HasOne("NoCode.FlowerShop.Domain.FlowerArrangement", "FlowerArrangement")
                                .WithMany()
                                .HasForeignKey("FlowerArrangementId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.Navigation("FlowerArrangement");
                        });

                    b.Navigation("Customer");

                    b.Navigation("DeliveryLocation");

                    b.Navigation("FlowerArrangements");
                });
#pragma warning restore 612, 618
        }
    }
}
